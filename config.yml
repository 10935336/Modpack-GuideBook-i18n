import hashlib
import imghdr
import logging
import os
import sys
import urllib.parse

from qcloud_cos import CosConfig
from qcloud_cos import CosS3Client


# 传入文件路径，校验编码
def change_coding(file_name=""):
    # 是不是图片？如果是，跳过
    if imghdr.what(file_name) is not None:
        return

    # 将其他文件读取成字节数据
    with open(file_name, 'rb') as f:
        raw_data = f.read()

    # 开始按照 utf-8 编码写入
    with open(file_name, 'w', encoding='utf-8') as e:
        try:
            # 先尝试写 utf-8 编码
            e.write(raw_data.decode('utf-8'))
        except UnicodeDecodeError:
            try:
                # 写 gbk 编码
                e.write(raw_data.decode('gbk'))
            except UnicodeDecodeError:
                # 特殊情况
                print(file_name)


# 传入文件夹地址
def dir_encoding_change(dir_in=""):
    # 判断是不是文件夹
    if os.path.isdir(dir_in):
        # 开始遍历
        for k in os.listdir(dir_in):
            # 判定是不是 .git 文件，不是直接跳出本次循环
            if k == ".git":
                continue
            # 是文件夹，递推
            if os.path.isdir(dir_in + '/' + k):
                dir_encoding_change(dir_in + '/' + k)
            # 是文件，转换编码
            elif os.path.isfile(dir_in + '/' + k):
                change_coding(dir_in + '/' + k)


if __name__ == '__main__':
    # 不存在时，进行 clone
    if not os.path.exists('win'):
        os.system("git clone https://github.com/CFPAOrg/Modpack-GuideBook-i18n.git win")

    # 进入 win 文件夹，进行一次 pull
    os.system('cd win && git pull -f')

    # 处理 Linux 文件夹
    os.system("cp -r win linux")
    dir_encoding_change("./linux")

    # 存储整合数据
    data_total = []

    # 日志开始记录
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)

    # 登陆腾讯云
    config = CosConfig(Secret_id='AKIDTr580gei1QYhoGRu1wgEaDueVPEtq2lN',
                       Secret_key='b1HMRSIxRxVzIPKBsNgyLbiePyVtFe6Y',
                       Region='ap-guangzhou')

    # 获取客户端对象
    client = CosS3Client(config)

    # 开始遍历 win，获取整合
    for i in os.listdir("./win/"):
        # 判定是不是文件夹，不是直接跳出本次循环
        if not os.path.isdir(str.format("./win/{}/", i)):
            continue

        # 判定是不是 .git 文件，不是直接跳出本次循环
        if i == ".git":
            continue

        # 存储不同版本信息
        contents = []

        # 遍历不同版本
        for j in os.listdir(str.format("./win/{}/", i)):
            # 判定是不是文件夹，不是直接跳出本次循环
            if not os.path.isdir(str.format("./win/{}/{}", i, j)):
                continue

            # 对应的文件名称
            win_file = str.format("file/{}-{}-windows.zip", i, j)
            linux_file = str.format("file/{}-{}-linux.zip", i, j)

            # 打包
            os.system(str.format('cd "./win/{}/{}" && zip -r -9 "../../../{}" ./*', i, j, win_file))
            os.system(str.format('cd "./linux/{}/{}" && zip -r -9 "../../../{}" ./*', i, j, linux_file))

            # Win 获取 MD5，SHA-1
            with open(win_file, 'rb') as a:
                client.upload_file(Bucket='modpack-1257209710',
                                   Key=win_file,
                                   LocalFilePath=win_file,
                                   PartSize=10,
                                   MAXThread=10,
                                   CacheControl='no-cache')
                win_md5 = hashlib.md5(a.read()).hexdigest()
                win_sha1 = hashlib.sha1(a.read()).hexdigest()

            # Linux 获取 MD5，SHA-1
            with open(linux_file, 'rb') as b:
                client.upload_file(Bucket='modpack-1257209710',
                                   Key=linux_file,
                                   LocalFilePath=linux_file,
                                   PartSize=10,
                                   MAXThread=10,
                                   CacheControl='no-cache')
                linux_md5 = hashlib.md5(b.read()).hexdigest()
                linux_sha1 = hashlib.sha1(b.read()).hexdigest()

            # 存入信息
            contents.append({
                "version": j,
                "windows": {
                    'url': 'https://modpack-1257209710.cos.ap-guangzhou.myqcloud.com/' +
                           urllib.parse.quote(win_file, safe='/'),
                    "md5": win_md5,
                    "sha1": win_sha1
                },
                "linux": {
                    "url": "https://modpack-1257209710.cos.ap-guangzhou.myqcloud.com/" +
                           urllib.parse.quote(linux_file, safe='/'),
                    "md5": linux_md5,
                    "sha1": linux_sha1
                }
            })

        # 存入总信息
        data_total.append({"name": i, "contents": contents})

    # 写 vue.js 文件
    with open('pages/js/data.js', 'w', encoding='utf-8') as c:
        c.write('var data_total=new Vue({el:"#data_total",data:{data_total:' + str(data_total) + '}});')

    # 删除备份
    os.system('rm -rf ./linux')

    # 上传
    os.system('cd pages && git add . && git commit -m "自动更新" && git push')
